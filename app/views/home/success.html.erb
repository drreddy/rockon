
<link href="assets/css/style.css" rel="stylesheet" type="text/css" media="all"/>
<link href='http://fonts.googleapis.com/css?family=Open+Sans:300,600,700,400' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Raleway:100,200,300,400,500,600,700,800,900' rel='stylesheet' type='text/css'>
<script src="assets/js/jquery.easydropdown.js"></script>
<script src="assets/js/jquery.magnific-popup.js" type="text/javascript"></script>
<link href="assets/css/magnific-popup.css" rel="stylesheet" type="text/css">

<style>
    #full_graph{
      width:80%;
      left:10%;
      height:500px;
      position: absolute;
    }
</style>

<script type="text/javascript">
	jQuery(document).ready(function($) {
			$(".scroll").click(function(event){		
				event.preventDefault();
				$('html,body').animate({scrollTop:$(this.hash).offset().top},1200);
			});
			/*$(".rawdata_but").click(function(){
			  $(".graphdata").slideUp("medium",function(){
			  	$(".rawdata").slideDown("medium");
			  });
			});
			$(".graphdata_but").click(function(){
			  $(".rawdata").slideUp("medium",function(){
			  	$(".graphdata").slideDown("medium");
			  });
			});*/
			$('#rawdata_but').magnificPopup({
				type: 'inline',
		
				fixedContentPos: false,
				fixedBgPos: true,
		
				overflowY: 'auto',
		
				closeBtnInside: true,
				preloader: false,
				
				midClick: true,
				removalDelay: 300,
				mainClass: 'my-mfp-zoom-in'
			});

			$(".flat div ul li").click(function(){
			  var val = $('.flat span.selected').text();
			  //alert(value);
			  var class_name = $('.flat option[value="' + val +'"]').attr('class');
			  //alert(typeof class_name);

			  	$('#rawdata_but').attr('href','#'+class_name);

			  	setTimeout(function(){
			  		$.magnificPopup.open({
					  items: {
					    src: '#'+class_name,
					    type: 'inline'
					  },
					  fixedContentPos: false,
						fixedBgPos: true,

						overflowY: 'auto',

						closeBtnInside: true,
						preloader: false,

						midClick: true,
						removalDelay: 300,
						mainClass: 'my-mfp-zoom-in'
					});
			  	},250);
				/*$('.rawdata div')
					.filter(function() {return $(this).css('display') != 'none';})
					.slideUp("medium",function(){
						//alert("faded out");
		  		});
				$(".rawdata div."+class_name).slideDown("medium",function(){
  					//alert("faded in");
  				});*/
			});			
		});
</script>   
  <div class="header" id="home">
  	  <div class="header_top">
	   <div class="wrap">
		 	     <div class="logo">
						<a href="/">
							<span style="display: block; font-size: 2.2em; font-weight: 600; margin: 5px 15px; color: white;
-webkit-transition: all 0.3s ease;-moz-transition: all 0.3s ease;-o-transition: all 0.3s ease;transition: all 0.3s ease;">
								RockOn 
								<sub style="font-size: 0.3em; color: #727E8D; opacity: 0.6;">
									The Social-Music Recommender System
								</sub>
							</span>
						</a>
					</div>	
						<div class="menu">
						    <ul>
						    	<li class="current"><a href="#section-1" class="scroll">Selected Nodes</a></li>
						    	<li class="current"><a href="#section-2" class="scroll">Full Graph</a></li>
								<li class="login" >
									<div id="loginContainer">
										<% if session['fb_access_token'] %>
											<a href="/signout" id="loginButton"><span> + Signout</span></a>
										<% else %>
											<a href="/signin" id="loginButton"><span> + Login through Facebook</span></a>
										<% end %>
						            </div>
								</li>
								<div class="clear"></div>
							</ul>
						</div>							
	    		 <div class="clear"></div>
	        </div>
	    </div>
	 </div>			      	
     <div class="main" id="container" style="">
	 	<div class="content">	                       
           <div class="about_desc section" id="section-1" style="min-height:400px;"> 
              <div class="wrap">            
                 	<div class="section group example">
						<div class="col_1_of_2 span_1_of_2">
						   <h3>Music Likes from Facebook</h3>
						   <p><span>Click on any of the bands/artists from the below list and get similar results</span></p>
						   <p><div class="dropdown-buttons">   
			            		  <div class="dropdown-button" style="width:100%;">           			
			            			<select class="dropdown" tabindex="9" data-settings='{"wrapperClass":"flat"}' onchange="showdiv();">
				            			<option value="Artists/Bands" class="0">Artists/Bands</option>
				            			<% @i = 1 %>
				            			<% @likes['music']['data'].each do |musiclikes| %>	
											<option value="<%= musiclikes['name'] %>" class="<%=@i%>"><%= musiclikes['name'] %></option>
											<% @i += 1 %>
										<% end %>									
								  	</select>
								  </div>
							   </div>
							</p>

		 				</div>
						<div class="col_1_of_2 span_1_of_2">
						   <h3>Recommendation Results</h3>
						   <p><span>Based on the recommendations you can choose to visualize them in either of Raw Data View or visualizing them as a Graph.</span></p>
						   <div><center><div class="quote_button"><a class="popup-with-zoom-anim" id="rawdata_but" href="#0" style="padding:10px;">Show Raw Data</a> <!--<a class="graphdata_but" href="#" style="padding:10px;">Show Graph</a>--></div></center></div>
						   <div style="height:350px; overflow-y:auto; padding:10px 20px 10px 20px;">
<!-- 						   	<div class="graphdata"> Graph comes here </div> -->
						   </div>
						</div>
					</div>
				</div>
				<div id="0" class="mfp-hide" style="text-align: left; max-width: 30%; margin: 40px auto; position: relative;">
						<div class="priceing-tabel" style="height:600px; overflow-y:auto;">
							<div class="priceing-header">
								<h4>Raw Data View</h4>
								<a href="#"><label>All Facebook Likes</label></a>
							</div>
							<ul>
								<% @likes['music']['data'].each do |musiclikes| %>	
									<li><a href="#"><%= musiclikes['name'] %></a></li>
								<% end %>									
							</ul>
						</div>
					<% @i += 1 %>
				</div>
				<% @i = 1 %>
    			<% @retreived_data.each do |res| %>	
					<div id="<%=@i%>" class="mfp-hide" style="text-align: left; max-width: 30%; margin: 40px auto; position: relative;">
						<div class="priceing-tabel" style="height:600px; overflow-y:auto;">
							<div class="priceing-header">
								<h4>Raw Data View</h4>
								<a href="#"><%= res[:liked] %><br/><label>Recommended Data:</label></a>
							</div>
							<ul>
								<% if res[:recommended]['data'].length == 0 %>
									<li><a><label>No results for this artist/band</label></a></li>
								<% else %>									
									<% res[:recommended]['data'].each do |data| %>
										<li><a href="#"><%= data['name'] %></a></li>
									<% end %>
								<% end %>
							</ul>
						</div>
					<% @i += 1 %>
					</div>
				<% end %>	        
           </div>             
       	  <div class="features section" id="section-2" style="height:600px; text-align:justify; padding-top: 1em;">
       	   	 	<center><h2 style="margin-bottom: 0.5em">Full Graph</h2></center>
       	    <div class="browser">  	       
       	   	    <div id="mySliderTabsContainer">
       	   	    	<div style="">
	            		<p id="full_graph"></p>
	            	</div>
	            <div class="clear"></div>
	          </div>
          	</div>
       	   </div>  
       	 </div>
      </div>
     	<div class="copy-right">
			<div class="wrap">
				<p class="copy">Â© 2014 Developed by <a href="http://drreddy.herokuapp.com" target="_blank">drreddy</a>. Template by W3Layouts.</p>
			</div>
	  </div>

<script src="http://sigmajs.org/assets/js/sigma.min.js"></script>

<script>

var data = <%= @result %>

g = {
  nodes: [],
  edges: []
};

node_id = 0;

nodes_array = [];

var colors = [
      '#D5C7D4',
      '#D1D882',
      '#89DCBC',
      '#E6BBA0',
      '#E6B875',
      '#C6D7AC',
      '#9ECCE4',
      '#A6E09A',
      '#ECB0C8',
      '#B2DED6'
    ];

for (i in data) {

	if (data[i]['recommended']['data'].length !== 0){

		g.nodes.push({
		    id: 'n' + node_id,
		    label: data[i]['liked'],
		    x: Math.random(),
		    y: Math.random(),
		    size: 0.5 + 4.5 * Math.random(),
		    color: '#848484'
		});

		nodes_array.push(data[i]['liked']);

		node_id+=1;

		for (y in data[i]['recommended']['data']){
			
			g.nodes.push({
			    id: 'n' + node_id,
			    label: data[i]['recommended']['data'][y]['name'],
			    x: Math.random(),
			    y: Math.random(),
			    size: 0.5 + 4.5 * Math.random(),
			    color: '#848484'
			});

			nodes_array.push(data[i]['recommended']['data'][y]['name']);

			node_id+=1;				

		}

	}
	else{

		g.nodes.push({
		    id: 'n' + node_id,
		    label: data[i]['liked'],
		    x: Math.random(),
		    y: Math.random(),
		    size: 0.5 + 4.5 * Math.random(),
		    color: '#848484'
		});

		nodes_array.push(data[i]['liked']);

		node_id+=1;
	}

};

// Edges

edge_id = 0;

for (i in data) {

	if (data[i]['recommended']['data'].length !== 0){

		for (y in data[i]['recommended']['data']){
			
			g.edges.push({
				id: 'e' + edge_id,
				source: 'n' + nodes_array.indexOf(data[i]['liked']),
				target: 'n' + nodes_array.indexOf(data[i]['recommended']['data'][y]['name']),
				size: 0.5 + 4.5 * Math.random(),
				color: '#ccc'
			});		

			edge_id+=1;
		}

	}
	else{
	}

};

sigma.classes.graph.addMethod('neighbors', function(nodeId) {

    var k,
        neighbors = {},
        index = this.allNeighborsIndex[nodeId] || {};

    for (k in index)
      neighbors[k] = this.nodesIndex[k];

    return neighbors;

});

s = new sigma(
	{
  		graph: g,
  		container: 'full_graph'
  		
	}
);

// We first need to save the original colors of our
// nodes and edges, like this:
s.graph.nodes().forEach(function(n) {
n.originalColor = n.color;
});
s.graph.edges().forEach(function(e) {
e.originalColor = e.color;
});

// When a node is clicked, we check for each node
// if it is a neighbor of the clicked one. If not,
// we set its color as grey, and else, it takes its
// original color.
// We do the same for the edges, and we only keep
// edges that have both extremities colored.
s.bind('clickNode', function(e) {
var nodeId = e.data.node.id,
    toKeep = s.graph.neighbors(nodeId);
toKeep[nodeId] = e.data.node;

s.graph.nodes().forEach(function(n) {
  if (toKeep[n.id])
    n.color = n.originalColor;
  else
    n.color = '#eee';
});

s.graph.edges().forEach(function(e) {
  if (toKeep[e.source] && toKeep[e.target])
    e.color = e.originalColor;
  else
    e.color = '#eee';
});

// Since the data has been modified, we need to
// call the refresh method to make the colors
// update effective.
s.refresh();
});

// When the stage is clicked, we just color each
// node and edge with its original color.
s.bind('clickStage', function(e) {
s.graph.nodes().forEach(function(n) {
  n.color = n.originalColor;
});

s.graph.edges().forEach(function(e) {
  e.color = e.originalColor;
});

// Same as in the previous event:
s.refresh();
});

</script>
